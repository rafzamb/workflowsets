% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_best_wf.R
\name{get_best_wf}
\alias{get_best_wf}
\title{Extract models from a workflow set

\code{get_best_wf()} takes the updated workflow set that comes from the function
\code{workflow_map()}. It allows to obtain a top number of workflows based on a
evaluation metric, obtaining the finalized, entered workflows
on the test aprticion and the metrics in train / test.}
\usage{
get_best_wf(
  .wfs,
  .model = NULL,
  .rank_metric = NULL,
  .set_metrics = NULL,
  .resamples = NULL,
  .split = NULL,
  ctrl = tune::control_resamples()
)
}
\arguments{
\item{.wfs}{A updated workflow set.}

\item{.model}{the top number of workflows to extract. By default it is NULL
(extracts the best workflow). It admits 3 ways to specify the extraction of
the workflows, a numerical value that represents the "n" best workflows, a
character string with the word "top" (it has a regex that admits some
flexibility) followed by a numerical value ("Top 3" , "Top 5"), a string or
a vector of stings with the specific names of the workflows to be extracted
in reference to the column "wflow_id" of the workflows set supplied.}

\item{.rank_metric}{A character string for a metric. Represents the metric
on which the top models will be selected. If not specified, the first metric
of the workflow set is selected.}

\item{.set_metrics}{A "metric_set" object from the \code{metric_set} function
where a set of evaluation metrics are passed. It is used to calculate extra
metrics to those estimated in the supplied workflow set.}

\item{.resamples}{A resample rset created from an rsample function such as
\code{\link[rsample:vfold_cv]{rsample::vfold_cv()}}.Necessary to estimate the performance of workflows
with metrics not specified in the workflow set training.}

\item{.split}{An rsplit object. Necessary to estimate the performance of the
model in the test partition and also to obtain the trained workflows on the
test partition.}

\item{ctrl}{A \code{\link[=control_resamples]{control_resamples()}} object used to fine tune the resampling
process.}
}
\value{
a tibble. Saves the name of the supplied workflow set (useful if
you want to compare multiple workflow sets), the requested workflows
completed with the update of hyperparameters (both models and recipes).
Finally, according to the parameters supplied, it returns the workflows
trained on the train partitions and the adjustment metrics on train and
test. It contains the following columns "workflow_set_name", ".model_name",
"wf_finalize", "cv_metrics", ".last_fit_model", "test_metrics".
}
\description{
Extract models from a workflow set

\code{get_best_wf()} takes the updated workflow set that comes from the function
\code{workflow_map()}. It allows to obtain a top number of workflows based on a
evaluation metric, obtaining the finalized, entered workflows
on the test aprticion and the metrics in train / test.
}
\details{
The workflows are selected automatically by ranking and then filtering it by
the metric provided. The ".split" parameter is only necessary if you want to
obtain the trained workflows on the train partition and the metrics on test.

The ".resamples" parameter does not need to be specified, since the
performance of the model on train can be extracted from the supplied
workflow set. However, if you want to obtain evaluation metrics other than
those of the workflow set, it is necessary to specify it to obtain these
metrics from the supplied folds.

The ".set_metrics" parameter does not need to be specified, however it is
necessary to supply it to calculate non-estimated metrics in the workflow
set object. Also to estimate metrics on tests other than those that the
\code{last_fit()} function of the tune package has by default.
}
\examples{
library(workflowsets)

# Slightly smaller data size
data(Chicago, package = "modeldata")
Chicago <- Chicago[1:1195,]

time_val_split <-
   rsample::sliding_period(
      Chicago,
      date,
      "month",
      lookback = 38,
      assess_stop = 1
   )

chi_features_res
chi_features_res \%>\% rank_results(select_best = TRUE)

best_wf <- get_best_wf(.wfs = chi_features_res,
                       .model = "top 1",
                       .rank_metric = "rsq",
                       .split = time_val_split)

best_wf 
}
